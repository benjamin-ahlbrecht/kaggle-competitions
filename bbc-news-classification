{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b09ee9dd",
   "metadata": {
    "papermill": {
     "duration": 0.010358,
     "end_time": "2022-06-21T05:48:41.295703",
     "exception": false,
     "start_time": "2022-06-21T05:48:41.285345",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# BBC News Classification\n",
    "Here, we seek to classify BBC articles in one of 5 categories:\n",
    "1. Business\n",
    "2. Entertainment\n",
    "3. Politics\n",
    "4. Sport\n",
    "5. Tech\n",
    "\n",
    "To do this, we will utilize Non-negative Matrix Factorization to extract common features from words, which are encoded using sklearn's TF-IDF vectorizer. From here, we compare the approach to standard supervised learning algorithms (RandomForest and AdaBoost). The overall, data-analysis process is described below:\n",
    "1. **Data Ingestion, Inspection, Description, and Visualization:** to search for missing values or other inconsistencies and gain a better understanding of the data at hand\n",
    "2. **Data Processing:** Vectorize data into a TF-IDF matrix\n",
    "3. **Model Building:** Creating and training of NMF, RandomForest, and AdaBoost models.\n",
    "4. **Model Submission:** Testing of model accuracy via Kaggle submission for each model\n",
    "5. **Model Analysis and Comparsion:** Analysis of scores and NMF versus supervised learning algorithms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d17c82e4",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2022-06-21T05:48:41.312267Z",
     "iopub.status.busy": "2022-06-21T05:48:41.311325Z",
     "iopub.status.idle": "2022-06-21T05:48:41.330129Z",
     "shell.execute_reply": "2022-06-21T05:48:41.329029Z"
    },
    "papermill": {
     "duration": 0.029999,
     "end_time": "2022-06-21T05:48:41.332600",
     "exception": false,
     "start_time": "2022-06-21T05:48:41.302601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/learn-ai-bbc/BBC News Train.csv\n",
      "/kaggle/input/learn-ai-bbc/BBC News Sample Solution.csv\n",
      "/kaggle/input/learn-ai-bbc/BBC News Test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cfc235bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-21T05:48:41.351140Z",
     "iopub.status.busy": "2022-06-21T05:48:41.350478Z",
     "iopub.status.idle": "2022-06-21T05:48:55.343387Z",
     "shell.execute_reply": "2022-06-21T05:48:55.342483Z"
    },
    "papermill": {
     "duration": 14.004006,
     "end_time": "2022-06-21T05:48:55.345662",
     "exception": false,
     "start_time": "2022-06-21T05:48:41.341656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting klib\r\n",
      "  Downloading klib-1.0.1-py3-none-any.whl (20 kB)\r\n",
      "Requirement already satisfied: pandas<2.0.0,>=1.1.2 in /opt/conda/lib/python3.7/site-packages (from klib) (1.3.5)\r\n",
      "Requirement already satisfied: Jinja2<4.0.0,>=3.0.3 in /opt/conda/lib/python3.7/site-packages (from klib) (3.1.2)\r\n",
      "Requirement already satisfied: numpy<2.0.0,>=1.16.3 in /opt/conda/lib/python3.7/site-packages (from klib) (1.21.6)\r\n",
      "Requirement already satisfied: scipy<2.0.0,>=1.1.0 in /opt/conda/lib/python3.7/site-packages (from klib) (1.7.3)\r\n",
      "Requirement already satisfied: seaborn<0.12.0,>=0.11.1 in /opt/conda/lib/python3.7/site-packages (from klib) (0.11.2)\r\n",
      "Requirement already satisfied: matplotlib<4.0.0,>=3.0.3 in /opt/conda/lib/python3.7/site-packages (from klib) (3.5.2)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.7/site-packages (from Jinja2<4.0.0,>=3.0.3->klib) (2.0.1)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.7/site-packages (from matplotlib<4.0.0,>=3.0.3->klib) (2.8.2)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.7/site-packages (from matplotlib<4.0.0,>=3.0.3->klib) (9.1.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib<4.0.0,>=3.0.3->klib) (1.4.2)\r\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib<4.0.0,>=3.0.3->klib) (3.0.9)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.7/site-packages (from matplotlib<4.0.0,>=3.0.3->klib) (4.33.3)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.7/site-packages (from matplotlib<4.0.0,>=3.0.3->klib) (21.3)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.7/site-packages (from matplotlib<4.0.0,>=3.0.3->klib) (0.11.0)\r\n",
      "Requirement already satisfied: pytz>=2017.3 in /opt/conda/lib/python3.7/site-packages (from pandas<2.0.0,>=1.1.2->klib) (2022.1)\r\n",
      "Requirement already satisfied: typing-extensions in /opt/conda/lib/python3.7/site-packages (from kiwisolver>=1.0.1->matplotlib<4.0.0,>=3.0.3->klib) (4.2.0)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.7/site-packages (from python-dateutil>=2.7->matplotlib<4.0.0,>=3.0.3->klib) (1.16.0)\r\n",
      "Installing collected packages: klib\r\n",
      "Successfully installed klib-1.0.1\r\n",
      "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\r\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "!pip install klib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0bd71512",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-21T05:48:55.363360Z",
     "iopub.status.busy": "2022-06-21T05:48:55.362910Z",
     "iopub.status.idle": "2022-06-21T05:48:57.305414Z",
     "shell.execute_reply": "2022-06-21T05:48:57.304402Z"
    },
    "papermill": {
     "duration": 1.955041,
     "end_time": "2022-06-21T05:48:57.308175",
     "exception": false,
     "start_time": "2022-06-21T05:48:55.353134",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ML Models\n",
    "from sklearn.decomposition import NMF\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "# TF-IDF vectorizer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "# Data Inspection\n",
    "import klib\n",
    "\n",
    "# Visualization\n",
    "from matplotlib import pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Classification metrics\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# etc...\n",
    "from itertools import permutations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e5d2cc15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-21T05:48:57.324617Z",
     "iopub.status.busy": "2022-06-21T05:48:57.324227Z",
     "iopub.status.idle": "2022-06-21T05:48:57.353782Z",
     "shell.execute_reply": "2022-06-21T05:48:57.352098Z"
    },
    "papermill": {
     "duration": 0.040787,
     "end_time": "2022-06-21T05:48:57.356278",
     "exception": false,
     "start_time": "2022-06-21T05:48:57.315491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Data:\n",
    "    def __init__(self, df_train, df_test):\n",
    "        \"\"\"Load data as a Pandas DataFrame in preparation for model building, analysis.\"\"\"\n",
    "        self.df_train = df_train\n",
    "        self.df_test = df_test\n",
    "        \n",
    "        # Capture the potential categories\n",
    "        self.categories = pd.unique(df_train[\"Category\"])\n",
    "        self.n_categories = len(self.categories)\n",
    "        \n",
    "        # Extract the training labels\n",
    "        self.train_y = df_train[\"Category\"]\n",
    "        \n",
    "        # Vectorize the document text to create our training and testing features\n",
    "        self.vectorize()\n",
    "        \n",
    "        # Create a dictionary to hold our fitted models\n",
    "        self.models = {}\n",
    "    \n",
    "    def __str__(self):\n",
    "        return f\"\"\"\\\n",
    "BBC News Data:\n",
    "â”œâ”€â”€ Categories:         {self.categories}\n",
    "â”œâ”€â”€ # Categories:       {self.n_categories}\n",
    "â”œâ”€â”€ Train Observations: {len(self.df_train)}\n",
    "â””â”€â”€ Test Observations:  {len(self.df_test)}\n",
    "\n",
    "Train TF-IDF Matrix: {self.train_x.shape}\n",
    "Test TF-IDF Matrix:  {self.test_x.shape}\n",
    "\n",
    "Fitted Models:\n",
    "{self.models}\\\n",
    "\"\"\"\n",
    "    \n",
    "    def vectorize(self):\n",
    "        \"\"\"Vectorize the data into an TF-IDF matrix.\"\"\"\n",
    "        vectorizer = TfidfVectorizer(min_df=50, stop_words=\"english\")\n",
    "        \n",
    "        self.train_x = vectorizer.fit_transform(self.df_train[\"Text\"])\n",
    "        self.test_x = vectorizer.transform(self.df_test[\"Text\"])\n",
    "        self.feature_names = vectorizer.get_feature_names_out()\n",
    "    \n",
    "    def fit_nmf(self, beta_loss=\"frobenius\"):\n",
    "        \"\"\"Fit the vectorized training data to a Non-negative Matrix Factorization (NMF) model.\"\"\"\n",
    "        model = NMF(n_components=self.n_categories, solver=\"mu\", beta_loss=beta_loss)                    \n",
    "        model.fit(self.train_x)\n",
    "        \n",
    "        # Add the fitted model to our models dictionary\n",
    "        self.models[f\"nmf-{beta_loss}\"] = model\n",
    "    \n",
    "    def predict_nmf(self, tfidf=None, beta_loss=\"frobenius\"):\n",
    "        \"\"\"Predict from the fitted NMF model and generate cluster indices for each observation.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        tfidf: Array-like or None, default=None\n",
    "            The TF-IDF matrix transformed from the training data. If None, it will utilize the\n",
    "            training data.\n",
    "        \n",
    "        Returns\n",
    "        -------\n",
    "        predictions: np.ndarray\n",
    "            A 1D numpy array containing the cluster index predictions\n",
    "        \"\"\"\n",
    "        assert f\"nmf-{beta_loss}\" in self.models.keys(), \"Must fit an NMF model prior to making predictions.\"\n",
    "        model = self.models[f\"nmf-{beta_loss}\"]\n",
    "        \n",
    "        if tfidf is None:\n",
    "            tfidf = self.train_x\n",
    "        \n",
    "        # Transform the fitted NMF matrix to obtain the features matrix\n",
    "        model_features = model.transform(tfidf)\n",
    "        model_components = pd.DataFrame(model.components_, columns=self.feature_names)\n",
    "        \n",
    "        # Make predictions from the model\n",
    "        predictions = np.argmax(model_features, axis=1)\n",
    "        return predictions\n",
    "                \n",
    "    def fit_random_forest(self):\n",
    "        \"\"\"Fit the vectorized training data to a random forest model.\"\"\"\n",
    "        model = RandomForestClassifier(n_estimators=250)\n",
    "        model.fit(self.train_x, self.train_y)\n",
    "        \n",
    "        # Add the fitted model to our models dictionary\n",
    "        self.models[\"rf\"] = model\n",
    "    \n",
    "    def predict_random_forest(self, tfidf=None):\n",
    "        \"\"\"Predict from the fitted random forest model. If tfidf is None, the training\n",
    "        observations are utilized instead.\"\"\"\n",
    "        assert \"rf\" in self.models.keys(), \"Must fit a random forest model prior to making predictions.\"\n",
    "        model = self.models[\"rf\"]\n",
    "        \n",
    "        if tfidf is None:\n",
    "            tfidf = self.train_x\n",
    "        \n",
    "        predictions = model.predict(tfidf)\n",
    "        return predictions\n",
    "            \n",
    "    def fit_ada_boost(self):\n",
    "        \"\"\"Fit the vectorized training data to a AdaBoost model.\"\"\"\n",
    "        model = AdaBoostClassifier(n_estimators=250)\n",
    "        model.fit(self.train_x, self.train_y)\n",
    "        \n",
    "        # Add the fitted model to our models dictionary\n",
    "        self.models[\"ada\"] = model\n",
    "    \n",
    "    def predict_ada_boost(self, tfidf=None):\n",
    "        \"\"\"Predict from the fitted ada boost model. If tfidf is None, the training\n",
    "        observations are utilized instead.\"\"\"\n",
    "        assert \"ada\" in self.models.keys(), \"Must fit an ada boost model prior to making predictions.\"\n",
    "        model = self.models[\"ada\"]\n",
    "        \n",
    "        if tfidf is None:\n",
    "            tfidf = self.train_x\n",
    "        \n",
    "        predictions = model.predict(tfidf)\n",
    "        return predictions\n",
    "    \n",
    "    \n",
    "def labels_to_indices(indices_pred, labels_true, labels):\n",
    "    \"\"\"Map index predictions to the most accurate labels based on the underlying truth\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    indices_pred: np.ndarray\n",
    "        1D array of cluster index predictions\n",
    "    labels_true: iterable\n",
    "        Iterable containing the true labels\n",
    "    labels: iterable\n",
    "        The potential labels\n",
    "        \n",
    "    Returns\n",
    "    -------\n",
    "    best_mapping: dict\n",
    "        The mapping from labels to indices that provides the most accurate results\n",
    "    \"\"\"\n",
    "    n_labels = len(labels)# To avoid divergence in itakura-saito, we must add small values to our training data\n",
    "\n",
    "    n = len(indices_pred)\n",
    "    \n",
    "    # Store a best accuracy and permutation mapping to later return\n",
    "    best_accuracy = 0\n",
    "    best_mapping = None\n",
    "\n",
    "    # Create different permutations of the potential indices\n",
    "    for perm in permutations(range(n_labels)):\n",
    "        # Generate the mapping {label} -> {index}\n",
    "        mapping = {label: perm[i] for i, label in enumerate(labels)}\n",
    "\n",
    "        # Iterate through the truth and apply the mapping\n",
    "        label_true_inds = np.array([mapping[label] for label in labels_true])\n",
    "\n",
    "        # Compute the accuracy\n",
    "        accuracy = np.sum(label_true_inds == indices_pred) / n\n",
    "\n",
    "        if accuracy > best_accuracy:\n",
    "            best_accuracy = accuracy\n",
    "            best_mapping = mapping\n",
    "\n",
    "    return best_mapping\n",
    "\n",
    "\n",
    "def plot_confusion_matrix(confusion_matrix, labels):\n",
    "    \"\"\"Plots a confusion matrix given the matrix and labels.\"\"\"\n",
    "    fig, ax = plt.subplots(figsize=(13, 8))\n",
    "    sns.heatmap(\n",
    "        confusion_matrix,\n",
    "        annot=True,\n",
    "        fmt=\"d\",\n",
    "        linewidths=0.5,\n",
    "        ax=ax,\n",
    "        xticklabels=labels,\n",
    "        yticklabels=labels\n",
    "    )\n",
    "\n",
    "    ax.set_title(\"Confusion Matrix\")\n",
    "    ax.set_xlabel(\"Predicted\")\n",
    "    ax.set_ylabel(\"Truth\")\n",
    "    \n",
    "    return (fig, ax)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a6c7314",
   "metadata": {
    "papermill": {
     "duration": 0.007257,
     "end_time": "2022-06-21T05:48:57.371271",
     "exception": false,
     "start_time": "2022-06-21T05:48:57.364014",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Data Ingestion, Inspection, Description, and Visualization\n",
    "We will begin by loading in the data, and inspecting it for any missing values. Since it is text data, it is hard to visualize. To clean the data, we first gain a general understanding of the dataframes by displaying them. Using the `missingval_plot` function from `klib`, we can investigate whether any missing values exist. Lastly, to provide a visualization element, we create a bar plot containing the frequencies of each category in the training data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ded29e10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-21T05:48:57.388005Z",
     "iopub.status.busy": "2022-06-21T05:48:57.387535Z",
     "iopub.status.idle": "2022-06-21T05:48:57.836013Z",
     "shell.execute_reply": "2022-06-21T05:48:57.835304Z"
    },
    "papermill": {
     "duration": 0.459453,
     "end_time": "2022-06-21T05:48:57.837988",
     "exception": false,
     "start_time": "2022-06-21T05:48:57.378535",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ArticleId</th>\n",
       "      <th>Text</th>\n",
       "      <th>Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1833</td>\n",
       "      <td>worldcom ex-boss launches defence lawyers defe...</td>\n",
       "      <td>business</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>154</td>\n",
       "      <td>german business confidence slides german busin...</td>\n",
       "      <td>business</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1101</td>\n",
       "      <td>bbc poll indicates economic gloom citizens in ...</td>\n",
       "      <td>business</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1976</td>\n",
       "      <td>lifestyle  governs mobile choice  faster  bett...</td>\n",
       "      <td>tech</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>917</td>\n",
       "      <td>enron bosses in $168m payout eighteen former e...</td>\n",
       "      <td>business</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1485</th>\n",
       "      <td>857</td>\n",
       "      <td>double eviction from big brother model caprice...</td>\n",
       "      <td>entertainment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1486</th>\n",
       "      <td>325</td>\n",
       "      <td>dj double act revamp chart show dj duo jk and ...</td>\n",
       "      <td>entertainment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1487</th>\n",
       "      <td>1590</td>\n",
       "      <td>weak dollar hits reuters revenues at media gro...</td>\n",
       "      <td>business</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1488</th>\n",
       "      <td>1587</td>\n",
       "      <td>apple ipod family expands market apple has exp...</td>\n",
       "      <td>tech</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1489</th>\n",
       "      <td>538</td>\n",
       "      <td>santy worm makes unwelcome visit thousands of ...</td>\n",
       "      <td>tech</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1490 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      ArticleId                                               Text  \\\n",
       "0          1833  worldcom ex-boss launches defence lawyers defe...   \n",
       "1           154  german business confidence slides german busin...   \n",
       "2          1101  bbc poll indicates economic gloom citizens in ...   \n",
       "3          1976  lifestyle  governs mobile choice  faster  bett...   \n",
       "4           917  enron bosses in $168m payout eighteen former e...   \n",
       "...         ...                                                ...   \n",
       "1485        857  double eviction from big brother model caprice...   \n",
       "1486        325  dj double act revamp chart show dj duo jk and ...   \n",
       "1487       1590  weak dollar hits reuters revenues at media gro...   \n",
       "1488       1587  apple ipod family expands market apple has exp...   \n",
       "1489        538  santy worm makes unwelcome visit thousands of ...   \n",
       "\n",
       "           Category  \n",
       "0          business  \n",
       "1          business  \n",
       "2          business  \n",
       "3              tech  \n",
       "4          business  \n",
       "...             ...  \n",
       "1485  entertainment  \n",
       "1486  entertainment  \n",
       "1487       business  \n",
       "1488           tech  \n",
       "1489           tech  \n",
       "\n",
       "[1490 rows x 3 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ArticleId</th>\n",
       "      <th>Text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1018</td>\n",
       "      <td>qpr keeper day heads for preston queens park r...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1319</td>\n",
       "      <td>software watching while you work software that...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1138</td>\n",
       "      <td>d arcy injury adds to ireland woe gordon d arc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>459</td>\n",
       "      <td>india s reliance family feud heats up the ongo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1020</td>\n",
       "      <td>boro suffer morrison injury blow middlesbrough...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>730</th>\n",
       "      <td>1923</td>\n",
       "      <td>eu to probe alitalia  state aid  the european ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>731</th>\n",
       "      <td>373</td>\n",
       "      <td>u2 to play at grammy awards show irish rock ba...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>732</th>\n",
       "      <td>1704</td>\n",
       "      <td>sport betting rules in spotlight a group of mp...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>733</th>\n",
       "      <td>206</td>\n",
       "      <td>alfa romeos  to get gm engines  fiat is to sto...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>734</th>\n",
       "      <td>471</td>\n",
       "      <td>citizenship event for 18s touted citizenship c...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>735 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ArticleId                                               Text\n",
       "0         1018  qpr keeper day heads for preston queens park r...\n",
       "1         1319  software watching while you work software that...\n",
       "2         1138  d arcy injury adds to ireland woe gordon d arc...\n",
       "3          459  india s reliance family feud heats up the ongo...\n",
       "4         1020  boro suffer morrison injury blow middlesbrough...\n",
       "..         ...                                                ...\n",
       "730       1923  eu to probe alitalia  state aid  the european ...\n",
       "731        373  u2 to play at grammy awards show irish rock ba...\n",
       "732       1704  sport betting rules in spotlight a group of mp...\n",
       "733        206  alfa romeos  to get gm engines  fiat is to sto...\n",
       "734        471  citizenship event for 18s touted citizenship c...\n",
       "\n",
       "[735 rows x 2 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ArticleId</th>\n",
       "      <th>Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1018</td>\n",
       "      <td>sport</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1319</td>\n",
       "      <td>tech</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1138</td>\n",
       "      <td>business</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>459</td>\n",
       "      <td>entertainment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1020</td>\n",
       "      <td>politics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>730</th>\n",
       "      <td>1923</td>\n",
       "      <td>sport</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>731</th>\n",
       "      <td>373</td>\n",
       "      <td>tech</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>732</th>\n",
       "      <td>1704</td>\n",
       "      <td>business</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>733</th>\n",
       "      <td>206</td>\n",
       "      <td>entertainment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>734</th>\n",
       "      <td>471</td>\n",
       "      <td>politics</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>735 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ArticleId       Category\n",
       "0         1018          sport\n",
       "1         1319           tech\n",
       "2         1138       business\n",
       "3          459  entertainment\n",
       "4         1020       politics\n",
       "..         ...            ...\n",
       "730       1923          sport\n",
       "731        373           tech\n",
       "732       1704       business\n",
       "733        206  entertainment\n",
       "734        471       politics\n",
       "\n",
       "[735 rows x 2 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No missing values found in the dataset.\n",
      "No missing values found in the dataset.\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1490 entries, 0 to 1489\n",
      "Data columns (total 3 columns):\n",
      " #   Column     Non-Null Count  Dtype \n",
      "---  ------     --------------  ----- \n",
      " 0   ArticleId  1490 non-null   int64 \n",
      " 1   Text       1490 non-null   object\n",
      " 2   Category   1490 non-null   object\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 35.0+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 5 artists>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Obtain file paths to data\n",
    "fname_train = r\"/kaggle/input/learn-ai-bbc/BBC News Train.csv\"\n",
    "fname_test = r\"/kaggle/input/learn-ai-bbc/BBC News Test.csv\"\n",
    "fname_sample = r\"/kaggle/input/learn-ai-bbc/BBC News Sample Solution.csv\"\n",
    "\n",
    "# Load data as DataFrames\n",
    "df_train = pd.read_csv(fname_train)\n",
    "df_test = pd.read_csv(fname_test)\n",
    "df_sample = pd.read_csv(fname_sample)\n",
    "\n",
    "display(df_train)\n",
    "display(df_test)\n",
    "display(df_sample)\n",
    "\n",
    "# Search for missing values in the training and testing set\n",
    "klib.missingval_plot(df_train)\n",
    "klib.missingval_plot(df_test)\n",
    "\n",
    "# Inspect the training data\n",
    "df_train.info()\n",
    "\n",
    "# Examine the distribution of different categoies\n",
    "counts = df_train[\"Category\"].value_counts()\n",
    "categories = counts.index\n",
    "n_categories = len(categories)\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(8, 5))\n",
    "ax.set_xlabel(\"Category\")\n",
    "ax.set_ylabel(\"Frequency\")\n",
    "ax.bar(\n",
    "    x=range(n_categories),\n",
    "    height=counts.to_list(),\n",
    "    tick_label=counts.index\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48df1da6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-20T23:33:50.342840Z",
     "iopub.status.busy": "2022-06-20T23:33:50.342415Z",
     "iopub.status.idle": "2022-06-20T23:33:50.351504Z",
     "shell.execute_reply": "2022-06-20T23:33:50.350673Z",
     "shell.execute_reply.started": "2022-06-20T23:33:50.342810Z"
    },
    "papermill": {
     "duration": 0.008407,
     "end_time": "2022-06-21T05:48:57.854986",
     "exception": false,
     "start_time": "2022-06-21T05:48:57.846579",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2. Data Processing\n",
    "By initializing our Data() class, we will be able to vectorize the text into a TF-IDF matrix and prepare it for model building and training. TF-IDF is an acronym for *Term Frequency - Inverse Document Frequency*. A TF-IDF matrix allows us to determine how important each given word (feature) is in a set of documents. We can compute the term frequency as follows:\n",
    "\n",
    "$$\n",
    "t_f(w, d) = \\log(1 + f(w, d)),\n",
    "$$\n",
    "\n",
    "where $f(w, d))$ represents the frequency of a given word, $w$, in a document, $d$. The inverse document frequency is then simply\n",
    "\n",
    "$$\n",
    "id_f(w, D) = \\log\\left(\\frac{N}{f(w, D)}\\right),\n",
    "$$\n",
    "\n",
    "where $f(w, D)$ is the frequency of a given word, $w$, in the entire set of documents, $D$, and $N$ is the total number of documents. It can be easily seen that as as the document frequency increases, the inverse document frequency will decrease. Lastly, we can combine these principle to compute the term frequency-inverse document frequency as the product between the term frequency and inverse document frequency:\n",
    "\n",
    "$$\n",
    "tfid_f(w, d, D) = t_f(w,d) \\cdot id_f(w, D)\n",
    "$$\n",
    "\n",
    "This estimates the *importance* of individual words (features). To prevent unecessary words that appear in all documents, we set a minimum word frequency threshold of 50 before it can be factored into the computation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4d8ec0ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-21T05:48:57.874602Z",
     "iopub.status.busy": "2022-06-21T05:48:57.873728Z",
     "iopub.status.idle": "2022-06-21T05:48:58.754675Z",
     "shell.execute_reply": "2022-06-21T05:48:58.753595Z"
    },
    "papermill": {
     "duration": 0.893341,
     "end_time": "2022-06-21T05:48:58.756899",
     "exception": false,
     "start_time": "2022-06-21T05:48:57.863558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BBC News Data:\n",
      "â”œâ”€â”€ Categories:         ['business' 'tech' 'politics' 'sport' 'entertainment']\n",
      "â”œâ”€â”€ # Categories:       5\n",
      "â”œâ”€â”€ Train Observations: 1490\n",
      "â””â”€â”€ Test Observations:  735\n",
      "\n",
      "Train TF-IDF Matrix: (1490, 937)\n",
      "Test TF-IDF Matrix:  (735, 937)\n",
      "\n",
      "Fitted Models:\n",
      "{}\n"
     ]
    }
   ],
   "source": [
    "# Create our Data() class to ingest process our data and create a TF-IDF matrix for model fitting\n",
    "data = Data(df_train, df_test)\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "960b963e",
   "metadata": {
    "papermill": {
     "duration": 0.008267,
     "end_time": "2022-06-21T05:48:58.774121",
     "exception": false,
     "start_time": "2022-06-21T05:48:58.765854",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3. Model Building\n",
    "As mentioned previously, we will build 3 models: a non-negative matrix factorization model (NMF), a random forest model, and a ada boost model. The supervised model approaches will allow us to compare the effectiveness of a relatively unsupervised method (NMF). In NMF, we aim to approximate the input matrix, which is created by our TF-IDF vectorizer, as the product of 2 smaller matrices. That is, $\\mathbf{V} \\approx \\mathbf{WH}$. The feature matrix, $\\mathbf{W}$, will approximate the relative importance of each feature in each row. Thus, when we make predictions, we simply assign the observation to the cluster with the maximial feature importance. The rows of the coefficient matrix, $\\mathbf{H}$ correspond to each document, where the columns correspond to the importance of a given feature (word). \n",
    "\n",
    "Because of this, we *train* the model with the TF-IDF matrix created from the training data. So the dimensionality and features of the testing and training data are consistent, we will create the TF-IDF from the testing data by transforming the training data's TF-IDF matrix. As such, testing the NMF will only utilize words seen in both the training and testing data since our matrices are of fixed dimensions.\n",
    "\n",
    "NMF comes with multiple loss functions, `frobenius`, `kullback-leibler`, and `itakura-saito`. Since `itakura-saito` does not work with a negative beta-loss, we are unable to work with the loss function on the data. We will experiment with altering the other 2 and see which give the best performance."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "843e9aa6",
   "metadata": {
    "papermill": {
     "duration": 0.008078,
     "end_time": "2022-06-21T05:48:58.790682",
     "exception": false,
     "start_time": "2022-06-21T05:48:58.782604",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3.1. Non-negative Matrix Factorization Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84a57a81",
   "metadata": {
    "papermill": {
     "duration": 0.008118,
     "end_time": "2022-06-21T05:48:58.807294",
     "exception": false,
     "start_time": "2022-06-21T05:48:58.799176",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 3.1.1 Frobenius Loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b0ab48fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-21T05:48:58.826093Z",
     "iopub.status.busy": "2022-06-21T05:48:58.825659Z",
     "iopub.status.idle": "2022-06-21T05:48:59.518984Z",
     "shell.execute_reply": "2022-06-21T05:48:59.517993Z"
    },
    "papermill": {
     "duration": 0.705715,
     "end_time": "2022-06-21T05:48:59.521499",
     "exception": false,
     "start_time": "2022-06-21T05:48:58.815784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/decomposition/_nmf.py:294: FutureWarning: The 'init' value, when 'init=None' and n_components is less than n_samples and n_features, will be changed from 'nndsvd' to 'nndsvda' in 1.1 (renaming of 0.26).\n",
      "  FutureWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{4: 'business', 2: 'tech', 0: 'politics', 1: 'sport', 3: 'entertainment'}\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "     business       0.95      0.86      0.90       336\n",
      "entertainment       0.95      0.63      0.76       273\n",
      "     politics       0.78      0.97      0.86       274\n",
      "        sport       0.87      0.97      0.91       346\n",
      "         tech       0.84      0.89      0.86       261\n",
      "\n",
      "     accuracy                           0.87      1490\n",
      "    macro avg       0.88      0.86      0.86      1490\n",
      " weighted avg       0.88      0.87      0.86      1490\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<Figure size 936x576 with 2 Axes>,\n",
       " <AxesSubplot:title={'center':'Confusion Matrix'}, xlabel='Predicted', ylabel='Truth'>)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Fit the NMF model \n",
    "data.fit_nmf()\n",
    "\n",
    "# Obtain the fitted training examples\n",
    "nmf_fitted = data.predict_nmf()\n",
    "\n",
    "# Map the fitted values to labels\n",
    "mapping = labels_to_indices(nmf_fitted, data.train_y, labels=data.categories)# To avoid divergence in itakura-saito, we must add small values to our training data\n",
    "\n",
    "mapping_r = {v:k for k, v in mapping.items()}\n",
    "print(mapping_r)\n",
    "\n",
    "# Apply the mapping to our fitted data\n",
    "nmf_fitted = [mapping_r[a] for a in nmf_fitted]\n",
    "\n",
    "# Create a classification report\n",
    "print(classification_report(data.train_y, nmf_fitted))\n",
    "\n",
    "# We'll also create a confusion matrix\n",
    "cm_nmf = confusion_matrix(data.train_y, nmf_fitted)\n",
    "plot_confusion_matrix(cm_nmf, data.categories)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b5c1119",
   "metadata": {
    "papermill": {
     "duration": 0.009552,
     "end_time": "2022-06-21T05:48:59.541468",
     "exception": false,
     "start_time": "2022-06-21T05:48:59.531916",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 3.1.2 Kullback-Leibler Loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "513e1d42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-21T05:48:59.563095Z",
     "iopub.status.busy": "2022-06-21T05:48:59.562377Z",
     "iopub.status.idle": "2022-06-21T05:49:01.591609Z",
     "shell.execute_reply": "2022-06-21T05:49:01.590387Z"
    },
    "papermill": {
     "duration": 2.04294,
     "end_time": "2022-06-21T05:49:01.594085",
     "exception": false,
     "start_time": "2022-06-21T05:48:59.551145",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/decomposition/_nmf.py:294: FutureWarning: The 'init' value, when 'init=None' and n_components is less than n_samples and n_features, will be changed from 'nndsvd' to 'nndsvda' in 1.1 (renaming of 0.26).\n",
      "  FutureWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               precision    recall  f1-score   support\n",
      "\n",
      "     business       0.96      0.85      0.90       336\n",
      "entertainment       0.97      0.85      0.91       273\n",
      "     politics       0.76      0.97      0.85       274\n",
      "        sport       0.94      0.95      0.94       346\n",
      "         tech       0.90      0.89      0.89       261\n",
      "\n",
      "     accuracy                           0.90      1490\n",
      "    macro avg       0.91      0.90      0.90      1490\n",
      " weighted avg       0.91      0.90      0.90      1490\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<Figure size 936x576 with 2 Axes>,\n",
       " <AxesSubplot:title={'center':'Confusion Matrix'}, xlabel='Predicted', ylabel='Truth'>)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Fit the NMF model \n",
    "data.fit_nmf(beta_loss=\"kullback-leibler\")\n",
    "\n",
    "# Obtain the fitted training examples\n",
    "nmf_fitted_kl = data.predict_nmf(beta_loss=\"kullback-leibler\")\n",
    "\n",
    "# Map the fitted values to labels\n",
    "mapping_kl = labels_to_indices(nmf_fitted_kl, data.train_y, labels=data.categories)\n",
    "mapping_kl_r = {v:k for k, v in mapping_kl.items()}\n",
    "\n",
    "# Apply the mapping to our fitted data\n",
    "nmf_fitted_kl = [mapping_kl_r[a] for a in nmf_fitted_kl]\n",
    "\n",
    "# Create a classification report\n",
    "print(classification_report(data.train_y, nmf_fitted_kl))\n",
    "\n",
    "# We'll also create a confusion matrix\n",
    "cm_nmf_kl = confusion_matrix(data.train_y, nmf_fitted_kl)\n",
    "plot_confusion_matrix(cm_nmf_kl, data.categories)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e0ba5cf",
   "metadata": {
    "papermill": {
     "duration": 0.010631,
     "end_time": "2022-06-21T05:49:01.615133",
     "exception": false,
     "start_time": "2022-06-21T05:49:01.604502",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3.2. Random Forest Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e22df377",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-21T05:49:01.638789Z",
     "iopub.status.busy": "2022-06-21T05:49:01.638099Z",
     "iopub.status.idle": "2022-06-21T05:49:04.534993Z",
     "shell.execute_reply": "2022-06-21T05:49:04.533938Z"
    },
    "papermill": {
     "duration": 2.911663,
     "end_time": "2022-06-21T05:49:04.537457",
     "exception": false,
     "start_time": "2022-06-21T05:49:01.625794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               precision    recall  f1-score   support\n",
      "\n",
      "     business       1.00      1.00      1.00       336\n",
      "entertainment       1.00      1.00      1.00       273\n",
      "     politics       1.00      1.00      1.00       274\n",
      "        sport       1.00      1.00      1.00       346\n",
      "         tech       1.00      1.00      1.00       261\n",
      "\n",
      "     accuracy                           1.00      1490\n",
      "    macro avg       1.00      1.00      1.00      1490\n",
      " weighted avg       1.00      1.00      1.00      1490\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<Figure size 936x576 with 2 Axes>,\n",
       " <AxesSubplot:title={'center':'Confusion Matrix'}, xlabel='Predicted', ylabel='Truth'>)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 936x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Fit the random forest model\n",
    "data.fit_random_forest()\n",
    "rf_fitted = data.predict_random_forest()\n",
    "\n",
    "# Create a classification report\n",
    "print(classification_report(data.train_y, rf_fitted))\n",
    "\n",
    "# We'll also create a confusion matrix\n",
    "cm_rf = confusion_matrix(data.train_y, rf_fitted)\n",
    "plot_confusion_matrix(cm_rf, data.categories)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9976fae8",
   "metadata": {
    "papermill": {
     "duration": 0.01069,
     "end_time": "2022-06-21T05:49:04.559582",
     "exception": false,
     "start_time": "2022-06-21T05:49:04.548892",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3.3. Ada Boost Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "79c7710c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-21T05:49:04.585897Z",
     "iopub.status.busy": "2022-06-21T05:49:04.584002Z",
     "iopub.status.idle": "2022-06-21T05:49:09.663550Z",
     "shell.execute_reply": "2022-06-21T05:49:09.662739Z"
    },
    "papermill": {
     "duration": 5.093798,
     "end_time": "2022-06-21T05:49:09.665549",
     "exception": false,
     "start_time": "2022-06-21T05:49:04.571751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               precision    recall  f1-score   support\n",
      "\n",
      "     business       0.70      0.93      0.80       336\n",
      "entertainment       0.96      0.87      0.91       273\n",
      "     politics       0.99      0.74      0.84       274\n",
      "        sport       0.90      0.95      0.93       346\n",
      "         tech       0.97      0.85      0.91       261\n",
      "\n",
      "     accuracy                           0.88      1490\n",
      "    macro avg       0.91      0.87      0.88      1490\n",
      " weighted avg       0.90      0.88      0.88      1490\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<Figure size 936x576 with 2 Axes>,\n",
       " <AxesSubplot:title={'center':'Confusion Matrix'}, xlabel='Predicted', ylabel='Truth'>)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Fit the ada boost model\n",
    "data.fit_ada_boost()\n",
    "ada_fitted = data.predict_ada_boost()\n",
    "\n",
    "# Create a classification report\n",
    "print(classification_report(data.train_y, ada_fitted))\n",
    "\n",
    "# We'll also create a confusion matrix\n",
    "cm_ada = confusion_matrix(data.train_y, ada_fitted)\n",
    "plot_confusion_matrix(cm_ada, data.categories)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f548220",
   "metadata": {
    "papermill": {
     "duration": 0.011525,
     "end_time": "2022-06-21T05:49:09.690170",
     "exception": false,
     "start_time": "2022-06-21T05:49:09.678645",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4. Model Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "66108014",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-21T05:49:09.715409Z",
     "iopub.status.busy": "2022-06-21T05:49:09.714648Z",
     "iopub.status.idle": "2022-06-21T05:49:09.723494Z",
     "shell.execute_reply": "2022-06-21T05:49:09.722266Z"
    },
    "papermill": {
     "duration": 0.024274,
     "end_time": "2022-06-21T05:49:09.726012",
     "exception": false,
     "start_time": "2022-06-21T05:49:09.701738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BBC News Data:\n",
      "â”œâ”€â”€ Categories:         ['business' 'tech' 'politics' 'sport' 'entertainment']\n",
      "â”œâ”€â”€ # Categories:       5\n",
      "â”œâ”€â”€ Train Observations: 1490\n",
      "â””â”€â”€ Test Observations:  735\n",
      "\n",
      "Train TF-IDF Matrix: (1490, 937)\n",
      "Test TF-IDF Matrix:  (735, 937)\n",
      "\n",
      "Fitted Models:\n",
      "{'nmf-frobenius': NMF(n_components=5, solver='mu'), 'nmf-kullback-leibler': NMF(beta_loss='kullback-leibler', n_components=5, solver='mu'), 'rf': RandomForestClassifier(n_estimators=250), 'ada': AdaBoostClassifier(n_estimators=250)}\n"
     ]
    }
   ],
   "source": [
    "# View our fitted models\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3ef7b9bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-21T05:49:09.751044Z",
     "iopub.status.busy": "2022-06-21T05:49:09.750646Z",
     "iopub.status.idle": "2022-06-21T05:49:10.384582Z",
     "shell.execute_reply": "2022-06-21T05:49:10.383493Z"
    },
    "papermill": {
     "duration": 0.649842,
     "end_time": "2022-06-21T05:49:10.387706",
     "exception": false,
     "start_time": "2022-06-21T05:49:09.737864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['__notebook__.ipynb', 'submission.csv']\n"
     ]
    }
   ],
   "source": [
    "# Generate predictions for NMF, random forest, and adaboost\n",
    "nmf_predicted = data.predict_nmf(data.test_x)\n",
    "nmf_predicted = [mapping_r[a] for a in nmf_predicted]\n",
    "\n",
    "nmf_kl_predicted = data.predict_nmf(data.test_x, beta_loss=\"kullback-leibler\")\n",
    "nmf_kl_predicted = [mapping_kl_r[a] for a in nmf_kl_predicted]\n",
    "\n",
    "rf_predicted = data.predict_random_forest(data.test_x)\n",
    "\n",
    "ada_predicted = data.predict_ada_boost(data.test_x)\n",
    "\n",
    "# Create submission dataframes for each model\n",
    "df_submission = df_test.drop(labels=\"Text\", axis=1)\n",
    "\n",
    "# df_submission[\"Category\"] = nmf_predicted\n",
    "df_submission[\"Category\"] = nmf_kl_predicted\n",
    "# df_submission[\"Category\"] = rf_predicted\n",
    "# df_submission[\"Category\"] = ada_predicted\n",
    "\n",
    "df_submission.to_csv(\"submission.csv\", index=False)\n",
    "\n",
    "# Ensure the files were created\n",
    "print(os.listdir())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a012933a",
   "metadata": {
    "papermill": {
     "duration": 0.012311,
     "end_time": "2022-06-21T05:49:10.413463",
     "exception": false,
     "start_time": "2022-06-21T05:49:10.401152",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5. Model Analysis and Comparsion\n",
    "Upon submitting each model, we find the testing accuracies for the corresponding models:\n",
    "\n",
    "| Model         | Accuracy |\n",
    "|---------------|----------|\n",
    "| NMF (Frob)    | 87.76    |\n",
    "| NMF (KL)      | 90.61    |\n",
    "| Random Forest | 95.51    |\n",
    "| Ada Boost     | 81.36    |\n",
    "\n",
    "Overall, the random forest performs best, but the NMF models still performs decently well. The NMF with a Frobenius loss has approximately 87.76% accuracy, while the kullback-leibler loss has slightly higher accuracy at 90.61%. Ada boost, surprisingly, does not perform particularly well. Perhaps this is due to the high-dimensional space. The ensemble process of random forest overcomes this much better than ada boost may. The NMF likely performs worse the random forest due to the fact the NMF is an unsupervised task and we must rely purely on grouping similar data together."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 41.680532,
   "end_time": "2022-06-21T05:49:11.349811",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-06-21T05:48:29.669279",
   "version": "2.3.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
